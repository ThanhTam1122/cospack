name: Build macOS App with PyInstaller

on:
  push:
    branches: [feature/5_5_feedback]

jobs:
  build-mac:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Docker
        run: |
          brew install docker
          colima start

      - name: Create Dockerfile for PyInstaller
        run: |
          cat > Dockerfile.pyinstaller << EOF
          FROM python:3.9-slim
          
          # Install required packages
          RUN apt-get update && apt-get install -y \
              build-essential \
              libffi-dev \
              libssl-dev \
              freetds-dev \
              freetds-bin \
              tdsodbc \
              && rm -rf /var/lib/apt/lists/*
          
          # Install Python packages
          RUN pip install --no-cache-dir pyinstaller \
              fastapi uvicorn sqlalchemy \
              pydantic pydantic-settings pydantic-core \
              python-multipart requests PySide6
          
          WORKDIR /src
          EOF

      - name: Build Docker image
        run: |
          docker build -t pyinstaller-macos -f Dockerfile.pyinstaller .

      - name: Create spec file
        run: |
          mkdir -p pyinstaller
          cat > pyinstaller/shipping_app_darwin.spec << EOF
          # -*- mode: python ; coding: utf-8 -*-
          import os
          
          block_cipher = None
          
          a = Analysis(
              ['main.py'],
              pathex=[os.path.abspath('.')],
              binaries=[],
              datas=[("app", "app")],
              hiddenimports=[
                  # FastAPI and dependencies
                  'fastapi', 'fastapi.middleware', 'fastapi.middleware.cors',
                  'pydantic', 'pydantic_core', 'pydantic_settings', 'pydantic.json',
                  'starlette', 'starlette.middleware', 'starlette.middleware.cors',
                  'starlette.responses', 'starlette.routing', 'starlette.applications',
                  'starlette.types', 'starlette.datastructures', 'starlette.background',
                  'starlette.concurrency', 'starlette.config', 'starlette.exceptions',
                  'starlette.staticfiles', 'starlette.templating', 'starlette.websockets',
                  # Uvicorn and dependencies
                  'uvicorn', 'uvicorn.logging', 'uvicorn.loops', 'uvicorn.loops.auto',
                  'uvicorn.protocols', 'uvicorn.protocols.http', 'uvicorn.protocols.http.auto',
                  'uvicorn.protocols.websockets', 'uvicorn.protocols.websockets.auto',
                  'uvicorn.lifespan', 'uvicorn.lifespan.on', 'uvicorn.lifespan.off',
                  'uvicorn.protocols.http.h11_impl', 'uvicorn.protocols.http.httptools_impl',
                  'uvicorn.protocols.websockets.websockets_impl', 'uvicorn.protocols.websockets.wsproto_impl',
                  # SQLAlchemy and database
                  'sqlalchemy', 'sqlalchemy.ext.declarative', 'sqlalchemy.orm',
                  # Database drivers for macOS
                  'pymssql', 'sqlalchemy.dialects.mssql.pymssql',
                  # Request handling
                  'requests',
                  # UI components
                  'PySide6', 'PySide6.QtCore', 'PySide6.QtGui', 'PySide6.QtWidgets', 'PySide6.QtNetwork',
                  # App modules
                  'app', 'app.main'
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )
          
          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
          
          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='ShippingApp',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=True,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF

      - name: Create database adapter patch
        run: |
          mkdir -p app/patches
          cat > app/patches/db_adapter.py << 'EOF'
          """
          Patch module for database connection on macOS 
          to handle pymssql vs pyodbc differences
          """
          
          def patch_connection_string():
              """
              Patch the database connection string to use pymssql instead of pyodbc
              """
              import app.core.config
              import urllib.parse
              
              # Get the settings
              settings = app.core.config.settings
              
              # Create a pymssql connection string
              encoded_password = urllib.parse.quote_plus(settings.SQL_PASSWORD)
              settings.DATABASE_URL = (
                  f"mssql+pymssql://{settings.SQL_USER}:{encoded_password}@"
                  f"{settings.SQL_SERVER}:{settings.SQL_PORT}/{settings.SQL_DB}"
              )
              
              # Return the new connection string
              return settings.DATABASE_URL
              
          # Apply the patch when imported
          patch_connection_string()
          EOF
          
          # Add import to main.py if it exists
          if [ -f main.py ]; then
            sed -i '' '1s/^/import app.patches.db_adapter\n/' main.py
          fi

      - name: Create main entry point if not exists
        run: |
          if [ ! -f main.py ]; then
            echo "Creating main.py as it does not exist"
            cat > main.py << 'MAINPY'
          #!/usr/bin/env python3
          import app.patches.db_adapter
          from app.main import app
          import uvicorn
          
          if __name__ == "__main__":
              uvicorn.run(app, host="0.0.0.0", port=8000)
          MAINPY
          fi

      - name: Build macOS app with Docker
        run: |
          docker run --rm -v $(pwd):/src pyinstaller-macos bash -c "cd /src && python -m PyInstaller --clean pyinstaller/shipping_app_darwin.spec"

      - name: Create launcher script
        run: |
          mkdir -p dist
          cat > dist/run_shipping_app.command << EOF
          #!/bin/bash
          # macOS launcher script for Shipping App
          DIR="\$( cd "\$( dirname "\${BASH_SOURCE[0]}" )" && pwd )"
          cd "\$DIR"
          ./ShippingApp
          EOF
          chmod +x dist/run_shipping_app.command

      - name: Upload built app
        uses: actions/upload-artifact@v4
        with:
          name: macos-app
          path: |
            dist/ShippingApp
            dist/run_shipping_app.command
